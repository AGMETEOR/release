/*
Copyright 2020 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by counterfeiter. DO NOT EDIT.
package internalfakes

import (
	"sync"

	"k8s.io/release/pkg/patch"
)

type FakeMailSender struct {
	SendStub        func(string, string) error
	sendMutex       sync.RWMutex
	sendArgsForCall []struct {
		arg1 string
		arg2 string
	}
	sendReturns struct {
		result1 error
	}
	sendReturnsOnCall map[int]struct {
		result1 error
	}
	SetRecipientsStub        func(...string) error
	setRecipientsMutex       sync.RWMutex
	setRecipientsArgsForCall []struct {
		arg1 []string
	}
	setRecipientsReturns struct {
		result1 error
	}
	setRecipientsReturnsOnCall map[int]struct {
		result1 error
	}
	SetSenderStub        func(string, string) error
	setSenderMutex       sync.RWMutex
	setSenderArgsForCall []struct {
		arg1 string
		arg2 string
	}
	setSenderReturns struct {
		result1 error
	}
	setSenderReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMailSender) Send(arg1 string, arg2 string) error {
	fake.sendMutex.Lock()
	ret, specificReturn := fake.sendReturnsOnCall[len(fake.sendArgsForCall)]
	fake.sendArgsForCall = append(fake.sendArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Send", []interface{}{arg1, arg2})
	fake.sendMutex.Unlock()
	if fake.SendStub != nil {
		return fake.SendStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.sendReturns
	return fakeReturns.result1
}

func (fake *FakeMailSender) SendCallCount() int {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	return len(fake.sendArgsForCall)
}

func (fake *FakeMailSender) SendCalls(stub func(string, string) error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = stub
}

func (fake *FakeMailSender) SendArgsForCall(i int) (string, string) {
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	argsForCall := fake.sendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailSender) SendReturns(result1 error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = nil
	fake.sendReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMailSender) SendReturnsOnCall(i int, result1 error) {
	fake.sendMutex.Lock()
	defer fake.sendMutex.Unlock()
	fake.SendStub = nil
	if fake.sendReturnsOnCall == nil {
		fake.sendReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.sendReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMailSender) SetRecipients(arg1 ...string) error {
	fake.setRecipientsMutex.Lock()
	ret, specificReturn := fake.setRecipientsReturnsOnCall[len(fake.setRecipientsArgsForCall)]
	fake.setRecipientsArgsForCall = append(fake.setRecipientsArgsForCall, struct {
		arg1 []string
	}{arg1})
	fake.recordInvocation("SetRecipients", []interface{}{arg1})
	fake.setRecipientsMutex.Unlock()
	if fake.SetRecipientsStub != nil {
		return fake.SetRecipientsStub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setRecipientsReturns
	return fakeReturns.result1
}

func (fake *FakeMailSender) SetRecipientsCallCount() int {
	fake.setRecipientsMutex.RLock()
	defer fake.setRecipientsMutex.RUnlock()
	return len(fake.setRecipientsArgsForCall)
}

func (fake *FakeMailSender) SetRecipientsCalls(stub func(...string) error) {
	fake.setRecipientsMutex.Lock()
	defer fake.setRecipientsMutex.Unlock()
	fake.SetRecipientsStub = stub
}

func (fake *FakeMailSender) SetRecipientsArgsForCall(i int) []string {
	fake.setRecipientsMutex.RLock()
	defer fake.setRecipientsMutex.RUnlock()
	argsForCall := fake.setRecipientsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMailSender) SetRecipientsReturns(result1 error) {
	fake.setRecipientsMutex.Lock()
	defer fake.setRecipientsMutex.Unlock()
	fake.SetRecipientsStub = nil
	fake.setRecipientsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMailSender) SetRecipientsReturnsOnCall(i int, result1 error) {
	fake.setRecipientsMutex.Lock()
	defer fake.setRecipientsMutex.Unlock()
	fake.SetRecipientsStub = nil
	if fake.setRecipientsReturnsOnCall == nil {
		fake.setRecipientsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setRecipientsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMailSender) SetSender(arg1 string, arg2 string) error {
	fake.setSenderMutex.Lock()
	ret, specificReturn := fake.setSenderReturnsOnCall[len(fake.setSenderArgsForCall)]
	fake.setSenderArgsForCall = append(fake.setSenderArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("SetSender", []interface{}{arg1, arg2})
	fake.setSenderMutex.Unlock()
	if fake.SetSenderStub != nil {
		return fake.SetSenderStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.setSenderReturns
	return fakeReturns.result1
}

func (fake *FakeMailSender) SetSenderCallCount() int {
	fake.setSenderMutex.RLock()
	defer fake.setSenderMutex.RUnlock()
	return len(fake.setSenderArgsForCall)
}

func (fake *FakeMailSender) SetSenderCalls(stub func(string, string) error) {
	fake.setSenderMutex.Lock()
	defer fake.setSenderMutex.Unlock()
	fake.SetSenderStub = stub
}

func (fake *FakeMailSender) SetSenderArgsForCall(i int) (string, string) {
	fake.setSenderMutex.RLock()
	defer fake.setSenderMutex.RUnlock()
	argsForCall := fake.setSenderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMailSender) SetSenderReturns(result1 error) {
	fake.setSenderMutex.Lock()
	defer fake.setSenderMutex.Unlock()
	fake.SetSenderStub = nil
	fake.setSenderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMailSender) SetSenderReturnsOnCall(i int, result1 error) {
	fake.setSenderMutex.Lock()
	defer fake.setSenderMutex.Unlock()
	fake.SetSenderStub = nil
	if fake.setSenderReturnsOnCall == nil {
		fake.setSenderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setSenderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMailSender) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sendMutex.RLock()
	defer fake.sendMutex.RUnlock()
	fake.setRecipientsMutex.RLock()
	defer fake.setRecipientsMutex.RUnlock()
	fake.setSenderMutex.RLock()
	defer fake.setSenderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMailSender) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ patch.MailSender = new(FakeMailSender)
